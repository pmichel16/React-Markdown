{"version":3,"sources":["logo.svg","dragElement.js","TextEditor.js","MarkdownOutput.js","SizeButtons.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","dragElement","header","container","pos1","pos2","pos3","pos4","elementDrag","e","window","event","preventDefault","clientX","clientY","style","top","offsetTop","left","offsetLeft","parseFloat","closeDragElement","document","onmouseup","onmousemove","onmousedown","TextEditor","props","this","getElementById","splitClass","classNames","splitH","splitV","id","className","value","input","onChange","updateText","React","Component","MarkdownOutput","markdownText","bind","__html","marked","text","dangerouslySetInnerHTML","SizeButtons","onClick","splitHoriz","splitVert","origText","App","state","setState","target","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAAAA,EAAOC,QAAU,IAA0B,kC,6ICKpC,SAASC,EAAYC,EAAQC,GAClC,IAAIC,EAAO,EAAGC,EAAO,EAAGC,EAAO,EAAGC,EAAO,EAczC,SAASC,EAAYC,IACnBA,EAAIA,GAAKC,OAAOC,OACdC,iBAEFR,EAAOE,EAAOG,EAAEI,QAChBR,EAAOE,EAAOE,EAAEK,QAChBR,EAAOG,EAAEI,QACTN,EAAOE,EAAEK,QAETX,EAAUY,MAAMC,IAAOb,EAAUc,UAAYZ,EAAQ,KACrDF,EAAUY,MAAMG,KAAQf,EAAUgB,WAAaf,EAAQ,KAEnDgB,WAAWjB,EAAUY,MAAMC,KAAO,IACpCb,EAAUY,MAAMC,IAAM,OAEpBI,WAAWjB,EAAUY,MAAMG,MAAQ,IACrCf,EAAUY,MAAMG,KAAO,OAI3B,SAASG,IAEPC,SAASC,UAAY,KACrBD,SAASE,YAAc,KApCzBtB,EAAOuB,YAEP,SAAuBhB,IACrBA,EAAIA,GAAKC,OAAOC,OACdC,iBAEFN,EAAOG,EAAEI,QACTN,EAAOE,EAAEK,QACTQ,SAASC,UAAYF,EAErBC,SAASE,YAAchB,G,yBCcZkB,E,YAzBb,WAAYC,GAAQ,qEACZA,I,iFAKFC,KAAKD,MAAMjB,QACbT,EAAYqB,SAASO,eAAe,iBAAkBP,SAASO,eAAe,uB,+BAKhF,IAAIC,EAAaC,IAAW,CAC1B,qBAAsBH,KAAKD,MAAMK,OACjC,oBAAqBJ,KAAKD,MAAMM,SAElC,OACE,yBAAKC,GAAG,mBAAmBC,UAAW,8BAAgCL,GACpE,yBAAKI,GAAG,gBAAgBC,UAAU,WAClC,8BAAUC,MAAOR,KAAKD,MAAMU,MAAOC,SAAUV,KAAKD,MAAMY,WAAYJ,UAAW,UAAYL,S,GApB1EU,IAAMC,W,iBCkChBC,E,YAhCb,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KACDgB,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,4EAOjB,MAAO,CAAEC,OADUC,IAAOlB,KAAKD,MAAMoB,S,0CAMjCnB,KAAKD,MAAMjB,QACbT,EAAYqB,SAASO,eAAe,iBAAkBP,SAASO,eAAe,uB,+BAIhF,IAAIC,EAAaC,IAAW,CAC1B,qBAAsBH,KAAKD,MAAMK,OACjC,oBAAqBJ,KAAKD,MAAMM,SAElC,OACE,yBAAKC,GAAG,mBAAmBC,UAAW,8BAAgCL,GACpE,yBAAKI,GAAG,gBAAgBC,UAAU,WAClC,yBAAKA,UAAW,UAAYL,GAC1B,uBAAGkB,wBAAyBpB,KAAKe,uB,GA1BdH,IAAMC,WCYpBQ,G,kBAdb,WAAYtB,GAAQ,qEACZA,I,sEAGN,OACE,yBAAKO,GAAG,qBACN,2CACA,4BAAQgB,QAAStB,KAAKD,MAAMwB,YAA5B,sBACA,4BAAQD,QAAStB,KAAKD,MAAMyB,WAA5B,yB,GATkBZ,IAAMC,YCI1BY,G,YAAW,iRAwEFC,E,YAjEb,WAAY3B,GAAQ,IAAD,8BACjB,4CAAMA,KACD4B,MAAQ,CACXlB,MAAOgB,EACP3C,QAAQ,EACRsB,QAAQ,EACRC,QAAQ,GAEV,EAAKM,WAAa,EAAKA,WAAWK,KAAhB,gBAClB,EAAKlC,OAAS,EAAKA,OAAOkC,KAAZ,gBACd,EAAKO,WAAa,EAAKA,WAAWP,KAAhB,gBAClB,EAAKQ,UAAY,EAAKA,UAAUR,KAAf,gBAXA,E,wEAcRjC,GACTiB,KAAK4B,SAAS,CACZnB,MAAO1B,EAAM8C,OAAOrB,U,+BAKtBR,KAAK4B,SAAS,CACZ9C,QAAQ,EACRsB,QAAQ,EACRC,QAAQ,M,mCAIVL,KAAK4B,SAAS,CACZ9C,QAAQ,EACRsB,QAAQ,EACRC,QAAQ,M,kCAIVL,KAAK4B,SAAS,CACZ9C,QAAQ,EACRsB,QAAQ,EACRC,QAAQ,M,+BAKV,OACE,yBAAKE,UAAU,OACb,kBAAC,EAAD,CACEE,MAAOT,KAAK2B,MAAMlB,MAClBE,WAAYX,KAAKW,WACjB7B,OAAQkB,KAAK2B,MAAM7C,OACnBsB,OAAQJ,KAAK2B,MAAMvB,OACnBC,OAAQL,KAAK2B,MAAMtB,SACrB,kBAAC,EAAD,CACEc,KAAMnB,KAAK2B,MAAMlB,MACjB3B,OAAQkB,KAAK2B,MAAM7C,OACnBsB,OAAQJ,KAAK2B,MAAMvB,OACnBC,OAAQL,KAAK2B,MAAMtB,SACrB,kBAAC,EAAD,CACEkB,WAAYvB,KAAKuB,WACjBC,UAAWxB,KAAKwB,iB,GA5DRZ,IAAMC,WCAJiB,QACW,cAA7BhD,OAAOiD,SAASC,UAEe,UAA7BlD,OAAOiD,SAASC,UAEhBlD,OAAOiD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAASO,eAAe,SD2H3C,kBAAmBmC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fafc60b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","/*\r\n * Make a window draggable by clicking on its header.\r\n * Adapted from: https://www.w3schools.com/howto/howto_js_draggable.asp\r\n */\r\n\r\nexport function dragElement(header, container) {\r\n  var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\r\n  header.onmousedown = dragMouseDown;\r\n\r\n  function dragMouseDown(e) {\r\n    e = e || window.event;\r\n    e.preventDefault();\r\n    // get the mouse cursor position at startup:\r\n    pos3 = e.clientX;\r\n    pos4 = e.clientY;\r\n    document.onmouseup = closeDragElement;\r\n    // call a function whenever the cursor moves:\r\n    document.onmousemove = elementDrag;\r\n  }\r\n\r\n  function elementDrag(e) {\r\n    e = e || window.event;\r\n    e.preventDefault();\r\n    // calculate the new cursor position:\r\n    pos1 = pos3 - e.clientX;\r\n    pos2 = pos4 - e.clientY;\r\n    pos3 = e.clientX;\r\n    pos4 = e.clientY;\r\n    // set the element's new position:\r\n    container.style.top = (container.offsetTop - pos2) + \"px\";\r\n    container.style.left = (container.offsetLeft - pos1) + \"px\";\r\n    //Make sure the window doesn't go off the page\r\n    if (parseFloat(container.style.top) < 0) {\r\n      container.style.top = \"0px\";\r\n    }\r\n    if (parseFloat(container.style.left) < 0) {\r\n      container.style.left = \"0px\";\r\n    }\r\n  }\r\n\r\n  function closeDragElement() {\r\n    // stop moving when mouse button is released:\r\n    document.onmouseup = null;\r\n    document.onmousemove = null;\r\n  }\r\n\r\n}","import React from 'react';\r\nimport { dragElement } from './dragElement.js';\r\nimport './Text.css';\r\nimport classNames from 'classnames';\r\n\r\nclass TextEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Make the editor draggable if it is in window form.\r\n    if (this.props.window) {\r\n      dragElement(document.getElementById(\"editor-header\"), document.getElementById(\"editor-container\"));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var splitClass = classNames({\r\n      'split-horiz-editor': this.props.splitH,\r\n      'split-vert-editor': this.props.splitV\r\n    });\r\n    return (\r\n      <div id=\"editor-container\" className={\"container editor-container \" + splitClass}>\r\n        <div id=\"editor-header\" className=\"header\"></div>\r\n        <textarea value={this.props.input} onChange={this.props.updateText} className={\"editor \" + splitClass}></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextEditor;","import React from 'react';\r\nimport marked from 'marked';\r\nimport { dragElement } from './dragElement.js'\r\nimport './Text.css';\r\nimport classNames from 'classnames'; \r\n\r\nclass MarkdownOutput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.markdownText = this.markdownText.bind(this);\r\n  }\r\n\r\n  markdownText() {\r\n    const markedText = marked(this.props.text);\r\n    return { __html: markedText };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Make the element draggable if it is in window form\r\n    if (this.props.window) {\r\n      dragElement(document.getElementById(\"output-header\"), document.getElementById(\"output-container\"));\r\n    }\r\n  }\r\n  render() {\r\n    var splitClass = classNames({\r\n      'split-horiz-output': this.props.splitH,\r\n      'split-vert-output': this.props.splitV\r\n    });\r\n    return (\r\n      <div id=\"output-container\" className={\"container output-container \" + splitClass}>\r\n        <div id=\"output-header\" className=\"header\"></div>\r\n        <div className={\"output \" + splitClass}>\r\n          <p dangerouslySetInnerHTML={this.markdownText()}></p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MarkdownOutput;","import React from 'react';\r\nimport './sizeButtons.css'\r\n\r\nclass SizeButtons extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"buttons-container\">\r\n        <button>Windows</button>\r\n        <button onClick={this.props.splitHoriz}>Split Horizontally</button>\r\n        <button onClick={this.props.splitVert}>Split Vertically</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SizeButtons;","import React from 'react';\r\nimport TextEditor from './TextEditor.js';\r\nimport MarkdownOutput from './MarkdownOutput.js';\r\nimport SizeButtons from './SizeButtons.js';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nconst origText = '# Markdown Previewer\\nThis is a Markdown previewer built with React and the marked package' +\r\n  '(https://cdnjs.com/libraries/marked). You can ' +\r\n  'write in **bold**, _italic_, or _**both**_! \\nIn addition to the header above, you can write\\n## Sub-Headers\\n' +\r\n  '### and Sub-Sub-Headers';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: origText,\r\n      window: true,\r\n      splitH: false,\r\n      splitV: false\r\n    };\r\n    this.updateText = this.updateText.bind(this);\r\n    this.window = this.window.bind(this);\r\n    this.splitHoriz = this.splitHoriz.bind(this);\r\n    this.splitVert = this.splitVert.bind(this);\r\n  }\r\n\r\n  updateText(event) {\r\n    this.setState({\r\n      input: event.target.value\r\n    })\r\n  }\r\n\r\n  window() {\r\n    this.setState({\r\n      window: true,\r\n      splitH: false,\r\n      splitV: false\r\n    })\r\n  }\r\n  splitHoriz() {\r\n    this.setState({\r\n      window: false,\r\n      splitH: true,\r\n      splitV: false\r\n    })\r\n  }\r\n  splitVert() {\r\n    this.setState({\r\n      window: false,\r\n      splitH: false,\r\n      splitV: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <TextEditor\r\n          input={this.state.input}\r\n          updateText={this.updateText}\r\n          window={this.state.window}\r\n          splitH={this.state.splitH}\r\n          splitV={this.state.splitV}/>\r\n        <MarkdownOutput\r\n          text={this.state.input} \r\n          window={this.state.window}\r\n          splitH={this.state.splitH}\r\n          splitV={this.state.splitV}/>\r\n        <SizeButtons\r\n          splitHoriz={this.splitHoriz}\r\n          splitVert={this.splitVert}/>\r\n        { /*<img src={logo} alt=\"Logo\" height=\"100px\" width=\"100px\" /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}